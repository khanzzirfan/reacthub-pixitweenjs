{"version":3,"file":"PixiTextSprite-d8bce14d.js","sources":["../../src/components/PixiTextSprite/PixiTextSprite.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useRef } from \"react\";\nimport { Container, Text } from \"@pixi/react\";\nimport * as PIXI from \"pixi.js\";\n// @ts-ignore\nimport isEmpty from \"lodash/isEmpty\";\n// @ts-ignore\nimport isEqual from \"lodash/isEqual\";\n// @ts-ignore\nimport pick from \"lodash/pick\";\nimport {\n  PixiBaseSpriteProps,\n  ForwardedRefResponse,\n} from \"../../types/BaseProps\";\nimport AbstractContainer from \"../../hocs/AbstractContainer\";\nimport { Effects } from \"../../types/Effects\";\nimport { withFiltersHook } from \"../../hooks/withFiltersHook\";\nimport { Animations } from \"../../types\";\n\nexport interface PixiTextSpriteProps extends PixiBaseSpriteProps {\n  text: string;\n  startAt: number;\n  endAt: number;\n  disabled?: boolean;\n  transformation: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    anchor: number;\n    rotation?: number;\n    alpha?: number;\n    scale?: number | [number, number];\n    tint?: number;\n    blendMode?: number;\n    animation?: Animations;\n    fontWeight?: string;\n    fontSize?: number;\n    fontFamily?: string;\n    fontStyle?: string;\n    fontColor?: string;\n    fontVariant?: string;\n    lineHeight?: number;\n    letterSpacing?: number;\n    textDecoration?: string;\n    wordWrap?: boolean;\n    wordWrapWidth?: number;\n    leading?: number;\n    padding?: number;\n    border?: string;\n    dropShadow?: boolean;\n    dropShadowColor?: string | number;\n    shadowOffsetX?: number;\n    shadowOffsetY?: number;\n    dropShadowBlur?: number;\n    blurEnabled?: boolean;\n    blurRadius?: number;\n    fill: string | number;\n    stroke?: string | number;\n    strokeThickness?: number;\n    zIndex?: number;\n    align?: string;\n    textBaseline?: string;\n    trim?: boolean;\n\n    colorCorrection?: {\n      enabled?: boolean;\n      temperature?: number;\n      hue?: number;\n      contrast?: number;\n      saturation?: number;\n      exposure?: number;\n      reset?: boolean;\n      sharpness?: number;\n      value?: number;\n      levels?: number;\n      luminance?: number;\n      enhance?: number;\n      blurRadius?: number;\n      red?: number;\n      green?: number;\n      blue?: number;\n      alpha?: number;\n      scaleInput?: number;\n    };\n    effect?: Effects;\n  };\n  pointerdown?: () => void;\n  pointerup?: () => void;\n  mousedown?: () => void;\n  mouseup?: () => void;\n  pointerover?: () => void;\n  mouseover?: () => void;\n  mouseout?: () => void;\n  applyTransformer?: boolean;\n  onTextUpdate?: (data: any) => void;\n  onAnchorTransformationEnd?: (endData: any) => void;\n  onDobuleClick?: () => void;\n}\n\nconst PixiTextSprite = React.forwardRef<\n  ForwardedRefResponse | null,\n  PixiTextSpriteProps\n>((props, ref) => {\n  //// State\n  // State variables to track click events\n  const doubleClickDelay = 300; // Adjust this as needed\n  //// Refs\n  const parentNode = useRef<PIXI.Container>(null);\n  const lastClickTimeRef = useRef<number>(0);\n  /// refs\n  const textRef = useRef<PIXI.Text>(null);\n  const textInnerGroupRef = useRef(null);\n  const textFontSize = useRef<number>(16);\n  const textTransformDetailRef = useRef<any>(null);\n\n  /// 1001\n  const {\n    visible,\n    text,\n    disabled,\n    transformation,\n    pointerdown,\n    onDobuleClick,\n  } = props;\n\n  const {\n    x,\n    y,\n    /// font\n    fontFamily = \"Arial\",\n    fontWeight = \"normal\",\n    fontStyle = \"normal\",\n    fontSize = 16,\n    fontVariant = \"normal\",\n    // fill\n    fill = \"black\",\n\n    // stroke\n    stroke,\n    strokeThickness = 0,\n    // drop shadow\n    blurRadius = 0,\n    blurEnabled = false,\n    dropShadowColor: shadowColor = null,\n    dropShadow = false,\n    dropShadowBlur = 0,\n    // multiline\n    wordWrapWidth = 50000000,\n    leading = 0,\n    letterSpacing,\n    colorCorrection = {},\n  } = transformation;\n\n  /// hooks\n  const {\n    temperatureFilter,\n    sharpnessFilter,\n    hueFilter,\n    blurFilter,\n    adjustmentFilter,\n  } = withFiltersHook(colorCorrection);\n\n  const { blurRadius: blurRadiusx = 0 } = colorCorrection;\n\n  React.useEffect(() => {\n    textFontSize.current = Number(fontSize);\n  }, [fontSize]);\n\n  const nFontStyle = [\"italic\", \"oblique\"].includes(fontStyle)\n    ? fontStyle\n    : undefined;\n\n  const nFontVariant = [\"small-caps\"].includes(fontVariant);\n\n  const nFontWeight = [\n    \"bold\",\n    \"bolder\",\n    \"lighter\",\n    \"100\",\n    \"200\",\n    \"300\",\n  ].includes(fontWeight)\n    ? fontWeight\n    : undefined;\n\n  const nLetterSpacing = Number(letterSpacing) > 0 ? letterSpacing : undefined;\n\n  const pixiStyles = React.useMemo(() => {\n    return new PIXI.TextStyle({\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fill: fill || \"white\", //[color, '#00ff99'], // gradient\n      ...(stroke &&\n        strokeThickness > 0 && {\n          stroke: stroke,\n          strokeThickness: strokeThickness,\n        }),\n      ...(nFontStyle && {\n        fontStyle: nFontStyle as unknown as PIXI.TextStyleFontStyle,\n      }),\n      ...(nFontVariant && {\n        fontVariant: nFontVariant as unknown as PIXI.TextStyleFontVariant,\n      }),\n      ...(nFontWeight && {\n        fontWeight: nFontWeight as unknown as PIXI.TextStyleFontWeight,\n      }),\n      ...(nLetterSpacing && { letterSpacing: nLetterSpacing }),\n      ...(blurEnabled && {\n        dropShadow: true,\n        dropShadowBlur: Number(blurRadius),\n        dropShadowColor: shadowColor?.toString() || \"black\",\n        dropShadowAngle: 0.5235987755982988,\n        dropShadowDistance: 5,\n      }),\n      ...(dropShadow && {\n        dropShadow: true,\n        dropShadowBlur: Number(dropShadowBlur),\n        dropShadowColor: shadowColor?.toString() || \"black\",\n        dropShadowAngle: 0.5235987755982988,\n        dropShadowDistance: 5,\n      }),\n      wordWrap: true,\n      breakWords: true,\n      wordWrapWidth: wordWrapWidth || 500,\n      leading: leading || 0,\n      // lineHeight: lineHeight,\n    });\n  }, [\n    blurEnabled,\n    blurRadius,\n    fill,\n    fontFamily,\n    fontSize,\n    fontStyle,\n    leading,\n    nFontStyle,\n    nFontWeight,\n    nFontVariant,\n    nLetterSpacing,\n    shadowColor,\n    stroke,\n    strokeThickness,\n    wordWrapWidth,\n    dropShadow,\n    dropShadowBlur,\n  ]);\n\n  // let textMetrics = {};\n  // if (!isEmpty(text) && !isEmpty(pixiStyles)) {\n  //   textMetrics = PIXI.TextMetrics.measureText(text, pixiStyles);\n  // }\n\n  // On transformation change, update the textTransformDetailRef\n  React.useEffect(() => {\n    textTransformDetailRef.current = {\n      ...transformation,\n    };\n  }, [transformation]);\n\n  const handleOnPointerDown = () => {\n    const currentTime = new Date().getTime();\n    const clickTimeDiff = currentTime - lastClickTimeRef.current;\n    if (clickTimeDiff < doubleClickDelay && onDobuleClick) {\n      onDobuleClick();\n    } else {\n      if (pointerdown) {\n        pointerdown();\n      }\n    }\n    lastClickTimeRef.current = currentTime;\n  };\n\n  const handleOnDoubleClick = () => {\n    if (!disabled && onDobuleClick) onDobuleClick();\n  };\n\n  return (\n    <AbstractContainer\n      {...props}\n      ref={ref}\n      isText={true}\n      onDoubleClick={handleOnDoubleClick}\n    >\n      <Container ref={parentNode}>\n        {/* @ts-ignore */}\n        <Container alpha={1} ref={textInnerGroupRef}>\n          <Text\n            style={pixiStyles}\n            x={x}\n            y={y}\n            anchor={0.5}\n            text={text}\n            alpha={visible ? 1 : 0}\n            {...(visible &&\n              !disabled && {\n                interactive: true,\n                buttonMode: true,\n                pointerdown: handleOnPointerDown,\n              })}\n            ref={textRef}\n            filters={[\n              temperatureFilter,\n              sharpnessFilter,\n              hueFilter,\n              adjustmentFilter,\n              // conditionally add blur filter\n              ...(blurRadiusx > 0 ? [blurFilter] : []),\n            ]}\n          />\n        </Container>\n      </Container>\n    </AbstractContainer>\n  );\n});\n\nexport default PixiTextSprite;\n\n// @ts-ignore\n// PixiTextSprite.whyDidYouRender = {\n//   logOnDifferentValues: true,\n//   customName: \"PixiTextSprite\",\n// };\n"],"names":["PixiTextSprite","React.forwardRef","props","ref","parentNode","useRef","lastClickTimeRef","textRef","textInnerGroupRef","textFontSize","textTransformDetailRef","visible","text","disabled","transformation","pointerdown","onDobuleClick","x","y","fontFamily","fontWeight","fontStyle","fontSize","fontVariant","fill","stroke","strokeThickness","blurRadius","blurEnabled","shadowColor","dropShadow","dropShadowBlur","wordWrapWidth","leading","letterSpacing","colorCorrection","temperatureFilter","sharpnessFilter","hueFilter","blurFilter","adjustmentFilter","withFiltersHook","blurRadiusx","React.useEffect","nFontStyle","nFontVariant","nFontWeight","nLetterSpacing","pixiStyles","React.useMemo","PIXI.TextStyle","handleOnPointerDown","currentTime","handleOnDoubleClick","jsx","AbstractContainer","Container","Text"],"mappings":"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"}